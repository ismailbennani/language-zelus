name: 'Zelus'
scopeName: 'source.zelus'
type: 'tree-sitter'
parser: 'tree-sitter-zelus'
fileTypes: ["zls", "zli"]

comments:
  start: '(* '
  end: ' *)'


folds: [
  {
    type: 'comment'
  }
  {
    start: {index: 0, type: '{'}
    end: {index: -1, type: '}'}
  }
  {
    start: {index: 0, type: '['}
    end: {index: -1, type: ']'}
  }
  {
    start: {index: 0, type: '('}
    end: {index: -1, type: ')'}
  }
  {
    type: 'if_expression',
    start: {type: '"then"'},
    end: {type: 'else_expression'}
  }
  {
    type: 'else_expression',
    start: {type: '"else"'},
  }
  {
    type: 'let_expression',
    start: {type: '"="'},
    end: {type: '"in"'}
  }
  {
    type: 'reset_expression',
    start: {type: '"reset"'},
    end: {type: '"every"'}
  }
  {
    type: 'automaton_expression',
    start: {type: '"automaton"'},
    end: {type: '"init"'}
  }
  {
    type: 'match_expression',
    start: {type: '"with"'},
    end: {type: '"end"'}
  }
  {
    type: 'present_expression',
    start: {type: '"->"'},
    end: {type: ['"else"', '"end"']}
  }
  {
    type: 'forall_equation',
  }
  {
    type: 'automaton_equation',
    start: {index: 0, type: '"automaton"'},
    end: {type: '"init"'}
  }
  {
    type: 'automaton_equation',
    start: {index: 0, type: '"automaton"'}
  }
  {
    type: 'match_equation',
    start: {index: 0, type: '"match"'}
  }
  {
    type: 'present_equation',
    start: {type: '"->"'},
    end: {type: ['"else"', '"end"']}
  }
  {
    type: 'if_equation',
  }
  {
    type: 'else_equation',
  }
  {
    type: 'reset_equation',
    start: {index: 0, type: '"reset"'},
    end: {type: '"every"'}
  }
  {
    type: [
      'eq_equation',
      'der_equation',
      'next_equation',
      'init_equation',
      'emit_equation',
      'period_equation',
      'last_equation',
      'let_declaration'
    ],
    start: {type: '"="'}
  }
  {
    type: [
      'automaton_handler_equation',
      'automaton_handler_expression',
      'match_handler_equation',
      'match_handler_expression',
      'present_handler_equation',
      'present_handler_expression',
      'der_reset_handler'
    ],
    start: {type: '"->"'}
  }
  {
    type: [
      'do_done_block'
      'block_equation',
      'block_expression',
      'block_optional_equation'
    ],
    start: {index: 0, type: '"do"'}
  }
  {
    type: 'fun_declaration',
    start: {type: ['"where"', '"="']},
  }
  {
    type: 'val_declaration',
    start: {type: ['":"']},
  }
  {
    start: {index: 0, type: ['"until"', '"unless"', '"else"']},
    end: {type: ['"then"', '"continue"']}
  }
  {
    type: 'one_local',
  }
  {
    type: 'one_let',
    start: {type: '"="'},
    end: {type: '"in"'}
  }
]

scopes:
  'ERROR': 'markup.underline.zelus' # debug tree-sitter-zelus

  'comment': 'comment.block.zelus'

  'integer': 'constant.numeric.zelus'
  'float'  : 'constant.numeric.zelus'
  'string' : 'string.quoted.double.zelus'
  'string > escape_sequence': 'constant.character.escape.zelus'
  'char'   : 'string.quoted.single.zelus'
  'bool'   : 'constant.language.boolean.zelus'

  'kind': 'keyword.control.zelus'
  'arrow': 'meta.arrow.zelus'

  'constructor': 'meta.class.zelus' # 'entity.name.type.variant.zelus'
  'type_var'   : 'storage.type.zelus'
  'identifier' : 'meta.identifier.zelus'
  'fun_name'   : 'entity.name.function.zelus'
  'ty_name'    : 'storage.type.zelus'

  'label_expr'                  : 'meta.label_expr.zelus'
  'present_expression'          : 'meta.present_expression.zelus'
  'match_expression'            : 'meta.match_expression.zelus'
  'automaton_expression'        : 'meta.automaton_expression.zelus'
  'reset_expression'            : 'meta.reset_expression.zelus'
  'every_expression'            : 'meta.every_expression.zelus'
  'let_expression'              : 'meta.let_expression.zelus'
  'else_expression'             : 'meta.else_expression.zelus'
  'if_expression'               : 'meta.if_expression.zelus'
  'application_expression'      : 'meta.application_expression.zelus'
  'update_expression'           : 'meta.update_expression.zelus'
  'record_access_expression'    : 'meta.record_access_expression.zelus'
  'tuple_expression'            : 'meta.tuple_expression.zelus'
  'slice_expression'            : 'meta.slice_expression.zelus'
  'concat_expression'           : 'meta.concat_expression.zelus'
  'access_expression'           : 'meta.access_expression.zelus'
  'do_in_expression'            : 'meta.do_in_expression.zelus'
  'period_expression'           : 'meta.period_expression.zelus'
  'last_expression'             : 'meta.last_expression.zelus'
  'reset_equation'              : 'meta.reset_equation.zelus'
  'present_equation'            : 'meta.present_equation.zelus'
  'else_equation'               : 'meta.else_equation.zelus'
  'if_equation'                 : 'meta.if_equation.zelus'
  'match_equation'              : 'meta.match_equation.zelus'
  'automaton_equation'          : 'meta.automaton_equation.zelus'
  'forall_equation'             : 'meta.forall_equation.zelus'
  'forall_index'                : 'meta.forall_index.zelus'
  'eq_equation'                 : 'meta.eq_equation.zelus'
  'period_equation'             : 'meta.period_equation.zelus'
  'der_equation'                : 'meta.der_equation.zelus'
  'next_equation'               : 'meta.next_equation.zelus'
  'init_equation'               : 'meta.init_equation.zelus'
  'emit_equation'               : 'meta.emit_equation.zelus'
  'last_equation'               : 'meta.last_equation.zelus'
  'do_done_block'               : 'meta.do_done_block.zelus'
  'block_equation'              : 'meta.block_equation.zelus'
  'block_expression'            : 'meta.block_expression.zelus'
  'block_optional_equation'     : 'meta.block_optional_equation.zelus'
  'automaton_handler_equation'  : 'meta.automaton_handler_equation'
  'automaton_handler_expression': 'meta.automaton_handler_expression'
  'match_handler_equation'      : 'meta.match_handler_equation'
  'match_handler_expression'    : 'meta.match_handler_expression'
  'present_handler_equation'    : 'meta.present_handler_equation'
  'present_handler_expression'  : 'meta.present_handler_expression'
  'der_reset_handler'           : 'meta.der_reset_handler'
  'let_declaration'             : 'meta.let_declaration.zelus'
  'fun_declaration'             : 'meta.fun_declaration.zelus'
  'val_declaration'             : 'meta.val_declaration.zelus'

  'pattern': 'meta.pattern.zelus'

  'one_local': 'meta.one_local.zelus'
  'one_let'  : 'meta.one_let.zelus'

  'one_local > identifier'                          : 'entity.name.function.zelus'
  'update_expression > identifier:nth-child(1)'     : 'entity.name.function.zelus'
  'last_expression > identifier:nth-child(1)'       : 'entity.name.function.zelus'
  'every_expression > identifier:nth-child(1)'      : 'entity.name.function.zelus'
  'if_expression > identifier:nth-child(1)'         : 'entity.name.function.zelus'
  'label_expr > identifier:nth-child(0)'            : 'entity.name.function.zelus'
  'der_equation > identifier:nth-child(1)'          : 'entity.name.function.zelus'
  'init_equation > identifier:nth-child(1)'         : 'entity.name.function.zelus'
  'emit_equation > identifier:nth-child(1)'         : 'entity.name.function.zelus'
  'next_equation > identifier:nth-child(1)'         : 'entity.name.function.zelus'
  'last_equation > identifier:nth-child(1)'         : 'entity.name.function.zelus'
  'forall_index > identifier:nth-child(0)'          : 'entity.name.function.zelus'
  'match_expression > identifier:nth-child(1)'      : 'entity.name.function.zelus'
  'match_equation > identifier:nth-child(1)'        : 'entity.name.function.zelus'
  'let_declaration > identifier:nth-child(1)'       : 'entity.name.function.zelus'
  'val_declaration > identifier:nth-child(1)'       : 'entity.name.function.zelus'

  'val_declaration > arrow' : 'entity.name.type.variant.zelus'

  'present_handler_equation > identifier:nth-child(0)':
      'entity.name.function.zelus'
  'present_handler_expression > identifier:nth-child(0)':
      'entity.name.function.zelus'
  'record_access_expression > identifier:nth-child(0)':
      'entity.name.variable.zelus'
  'der_reset_handler > identifier:nth-child(0)':
      'entity.name.function.zelus'

  # Ugly hack because atom do not support 'pattern identifier' selector, a
  # selector that should select any descendent of pattern of type identifier.
  # The only selector available for now is > which only goes down by 1 lvl
  # in the hierarchy. For now the tuples nested more than 4 times won't be
  # highlighted
  '''   eq_equation > pattern:nth-child(0) > identifier
      , eq_equation > pattern:nth-child(0) > pattern > identifier
      , eq_equation > pattern:nth-child(0) > pattern > pattern > identifier
      , eq_equation > pattern:nth-child(0) > pattern > pattern > pattern >
        identifier
      , eq_equation > pattern:nth-child(0) > pattern > pattern > pattern >
        pattern > identifier
  ''' : "entity.name.function.zelus"
  '''   match_handler_equation > pattern:nth-child(0) > identifier
      , match_handler_equation > pattern:nth-child(0) > pattern > identifier
      , match_handler_equation > pattern:nth-child(0) > pattern > pattern >
        identifier
      , match_handler_equation > pattern:nth-child(0) > pattern > pattern >
        pattern > identifier
      , match_handler_equation > pattern:nth-child(0) > pattern > pattern >
        pattern > pattern > identifier
  ''' : "entity.name.function.zelus"
  '''   match_handler_expression > pattern:nth-child(0) > identifier
      , match_handler_expression > pattern:nth-child(0) > pattern > identifier
      , match_handler_expression > pattern:nth-child(0) > pattern > pattern >
        identifier
      , match_handler_expression > pattern:nth-child(0) > pattern > pattern >
        pattern > identifier
      , match_handler_expression > pattern:nth-child(0) > pattern > pattern >
        pattern > pattern > identifier
  ''' : "entity.name.function.zelus"
  '''   period_equation > pattern:nth-child(1) > identifier
      , period_equation > pattern:nth-child(1) > pattern > identifier
      , period_equation > pattern:nth-child(1) > pattern > pattern > identifier
      , period_equation > pattern:nth-child(1) > pattern > pattern > pattern >
        identifier
      , period_equation > pattern:nth-child(1) > pattern > pattern > pattern >
        pattern > identifier
  ''' : "entity.name.function.zelus"
  # end of ugly hack

  'prfx'     : 'support.function.zelus'
  'infx'     : 'support.function.zelus'
  '"next"'   : 'keyword.control.zelus'
  '"last"'   : 'keyword.control.zelus'
  '"emit"'   : 'keyword.control.zelus'
  '"up"'     : 'keyword.control.zelus'

  '"open"'       : 'keyword.control.zelus'
  '"type"'       : 'keyword.control.zelus'
  '"val"'        : 'keyword.control.zelus'
  '"let"'        : 'keyword.control.zelus'
  '"rec"'        : 'keyword.control.zelus'
  '"in"'         : 'keyword.control.zelus'
  '"out"'        : 'keyword.control.zelus'
  '"on"'         : 'keyword.control.zelus'
  '"as"'         : 'keyword.control.zelus'
  '"of"'         : 'keyword.control.zelus'
  '"before"'     : 'keyword.control.zelus'
  '"and"'        : 'keyword.control.zelus'
  '"static"'     : 'keyword.control.zelus'
  '"atomic"'     : 'keyword.control.zelus'
  '"where"'      : 'keyword.control.zelus'
  '"der"'        : 'keyword.control.zelus'
  '"init"'       : 'keyword.control.zelus'
  '"default"'    : 'keyword.control.zelus'
  '"reset"'      : 'keyword.control.zelus'
  '"every"'      : 'keyword.control.zelus'
  '"present"'    : 'keyword.control.zelus'
  '"period"'     : 'keyword.control.zelus'
  '"local"'      : 'keyword.control.zelus'
  '"do"'         : 'keyword.control.zelus'
  '"done"'       : 'keyword.control.zelus'
  '"forall"'     : 'keyword.control.zelus'
  '"initialize"' : 'keyword.control.zelus'
  '"match"'      : 'keyword.control.zelus'
  '"with"'       : 'keyword.control.zelus'
  '"end"'        : 'keyword.control.zelus'
  '"automaton"'  : 'keyword.control.zelus'
  '"then"'       : 'keyword.control.zelus'
  '"continue"'   : 'keyword.control.zelus'
  '"until"'      : 'keyword.control.zelus'
  '"unless"'     : 'keyword.control.zelus'
  '"if"'         : 'keyword.control.zelus'
  '"else"'       : 'keyword.control.zelus'
