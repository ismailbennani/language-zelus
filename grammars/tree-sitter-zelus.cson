name: 'Zelus'
scopeName: 'zelus'
type: 'tree-sitter'
parser: 'tree-sitter-zelus'
fileTypes: ["zls", "zli"]

comments:
  start: '(* '
  end: ' *)'


folds: [
  {
    type: 'comment'
  }
  {
    start: {index: 0, type: '{'}
    end: {index: -1, type: '}'}
  }
  {
    start: {index: 0, type: '['}
    end: {index: -1, type: ']'}
  }
  {
    start: {index: 0, type: '('}
    end: {index: -1, type: ')'}
  }
  {
    type: 'if_expression',
    start: {type: '"then"'},
    end: {type: 'else_expression'}
  }
  {
    type: 'else_expression',
    start: {type: '"else"'},
  }
  {
    type: 'let_expression',
    start: {type: '"="'},
    end: {type: '"in"'}
  }
  {
    type: 'reset_expression',
    start: {type: '"reset"'},
    end: {type: '"every"'}
  }
  {
    type: 'automaton_expression',
    start: {type: '"automaton"'},
    end: {type: '"init"'}
  }
  {
    type: 'match_expression',
    start: {type: '"with"'},
    end: {type: '"end"'}
  }
  {
    type: 'present_expression',
    start: {type: '"->"'},
    end: {type: ['"else"', '"end"']}
  }
  {
    type: 'forall_equation',
    start: {type: '"do"'},
    end: {type: '"done"'}
  }
  {
    type: 'automaton_equation',
    start: {type: '"automaton"'},
    end: {type: ['"init"', '"end"']}
  }
  {
    type: 'match_equation',
    start: {type: '"match"'},
    end: {type: '"end"'}
  }
  {
    type: 'present_equation',
    start: {type: '"->"'},
    end: {type: ['"else"', '"end"']}
  }
  {
    type: 'if_equation',
    start: {type: '"then"'},
    end: {type: 'else_equation'}
  }
  {
    type: 'else_equation',
    start: {type: '"else"'},
  }
  {
    type: 'reset_equation',
    start: {type: '"reset"'},
    end: {type: '"every"'}
  }
  {
    start: {type: '"do"'},
    end: {type: ['"done"', '"then"', '"continue"', '"in"']}
  }
  {
    type: 'local_list',
    start: {type: '"local"'},
    end: {type: '"in"'}
  }
  {
    type: 'let_list',
    start: {type: '"="'},
    end: {type: '"in"'}
  }
]

scopes:
  'comment': 'comment.block.zelus'

  'integer': 'constant.numeric.zelus'
  'float'  : 'constant.numeric.zelus'
  'string' : 'string.quoted.double.zelus'
  'char'   : 'string.quoted.single.zelus'
  'bool'   : 'constant.language.boolean.zelus'

  'kind': 'keyword.control.zelus'
  'arrow': 'meta.arrow.zelus'

  'constructor': 'entity.name.type.variant.zelus'
  'type_var'   : 'storage.type.zelus'
  'identifier' : 'zelus'
  'fun_name'   : 'entity.name.function.zelus'
  'ty_name'    : 'storage.type.zelus'

  "present_expression"  : "meta.present_expression.zelus"
  "match_expression"    : "meta.match_expression.zelus"
  "automaton_expression": "meta.automaton_expression.zelus"
  "reset_expression"    : "meta.reset_expression.zelus"
  "let_expression"      : "meta.let_expression.zelus"
  "else_expression"     : "meta.else_expression.zelus"
  "if_expression"       : "meta.if_expression.zelus"
  "do_equation"         : "meta.do_equation.zelus"
  "reset_equation"      : "meta.reset_equation.zelus"
  "present_equation"    : "meta.present_equation.zelus"
  "else_equation"       : "meta.else_equation.zelus"
  "if_equation"         : "meta.if_equation.zelus"
  "match_equation"      : "meta.match_equation.zelus"
  "automaton_equation"  : "meta.automaton_equation.zelus"
  "forall_equation"     : "meta.forall_equation.zelus"
  "eq_equation"         : "meta.eq_equation.zelus"
  "period_equation"     : "meta.period_equation.zelus"
  "der_equation"        : "meta.der_equation.zelus"
  "next_equation"       : "meta.next_equation.zelus"
  "init_equation"       : "meta.init_equation.zelus"
  "emit_equation"       : "meta.emit_equation.zelus"

  "der_equation > identifier:nth-child(0)"    : "entity.name.function.zelus"
  "let_equation > identifier:nth-child(0)"    : "entity.name.function.zelus"
  "eq_equation > identifier:nth-child(0)"     : "entity.name.function.zelus"
  "init_equation > identifier:nth-child(0)"   : "entity.name.function.zelus"
  "emit_equation > identifier:nth-child(0)"   : "entity.name.function.zelus"
  "period_equation > identifier:nth-child(0)" : "entity.name.function.zelus"

  'prfx'     : 'support.function.zelus'
  'infx'     : 'support.function.zelus'
  '"next"'   : 'support.function.zelus'
  '"last"'   : 'support.function.zelus'
  '"emit"'   : 'support.function.zelus'
  '"up"'     : 'support.function.zelus'

  '"open"'       : 'keyword.control'
  '"type"'       : 'keyword.control'
  '"val"'        : 'keyword.control'
  '"let"'        : 'keyword.control'
  '"rec"'        : 'keyword.control'
  '"in"'         : 'keyword.control'
  '"out"'        : 'keyword.control'
  '"on"'         : 'keyword.control'
  '"as"'         : 'keyword.control'
  '"of"'         : 'keyword.control'
  '"and"'        : 'keyword.control'
  '"static"'     : 'keyword.control'
  '"atomic"'     : 'keyword.control'
  '"where"'      : 'keyword.control'
  '"der"'        : 'keyword.control'
  '"init"'       : 'keyword.control'
  '"default"'    : 'keyword.control'
  '"reset"'      : 'keyword.control'
  '"every"'      : 'keyword.control'
  '"present"'    : 'keyword.control'
  '"period"'     : 'keyword.control'
  '"local"'      : 'keyword.control'
  '"do"'         : 'keyword.control'
  '"done"'       : 'keyword.control'
  '"forall"'     : 'keyword.control'
  '"initialize"' : 'keyword.control'
  '"match"'      : 'keyword.control'
  '"with"'       : 'keyword.control'
  '"end"'        : 'keyword.control'
  '"automaton"'  : 'keyword.control'
  '"then"'       : 'keyword.control'
  '"continue"'   : 'keyword.control'
  '"until"'      : 'keyword.control'
  '"unless"'     : 'keyword.control'
  '"if"'         : 'keyword.control'
  '"else"'       : 'keyword.control'
